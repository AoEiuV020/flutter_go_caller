// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `go/flutter_go_caller.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class FlutterGoCallerBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterGoCallerBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterGoCallerBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// 通用调用接口，根据方法名和JSON参数字符串调用对应函数
  /// 参数:
  /// - method: 要调用的方法名
  /// - paramJSON: 包含参数的JSON字符串
  /// 返回值: 包含执行结果的JSON字符串
  /// 注意: 调用方需要负责释放返回的字符串内存，使用go_free_string函数
  ffi.Pointer<ffi.Char> go_call(
    ffi.Pointer<ffi.Char> method,
    ffi.Pointer<ffi.Char> paramJSON,
  ) {
    return _go_call(method, paramJSON);
  }

  late final _go_callPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('go_call');
  late final _go_call =
      _go_callPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
            )
          >();

  /// 非常重要：您必须提供一个函数来释放 sum_string 返回的内存
  void go_free_string(ffi.Pointer<ffi.Char> str) {
    return _go_free_string(str);
  }

  late final _go_free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'go_free_string',
      );
  late final _go_free_string =
      _go_free_stringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}
